<% environment.context_class.instance_eval { include ActionView::Helpers } %>
<% environment.context_class.instance_eval { include AngularRoutingHelper } %>
<% environment.context_class.instance_eval { include AngularTemplateCachingHelper } %>
<% environment.context_class.instance_eval { include ActionDispatch::Routing } %>
<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

window.App = angular.module('Consilium', ['ngResource'])

App.config ['$routeProvider', ($routeProvider) ->
  <% getAllAngularRoutes().each do |route| %>
  $routeProvider.when '<%= angularRouteAppPath(route).sub '#', '' %>',
    templateUrl: '<%= angularRouteFilePath(route) %>',
    reloadOnSearch: false,
    # HACK: 'defer' the route change so the loading indicator has a chance to appear.
    resolve:
      defer: ['$q', ($q) ->
        defer = $q.defer()
        setTimeout (-> defer.resolve()), 0
        return defer.promise
      ]
  <% end %>
  $routeProvider.otherwise
    templateUrl: '<%= angularRouteFilePath(app_templates_path) %>',
    reloadOnSearch: false,
]

App.config ["$httpProvider", ($httpProvider) ->
  $httpProvider.defaults.headers.common['X-CSRF-Token'] = $('meta[name=csrf-token]').attr('content')
  $httpProvider.responseInterceptors.push('AuthHttpInterceptor')
  $httpProvider.defaults.useXDomain = true
  delete $httpProvider.defaults.headers.common['X-Requested-With']
]

App.run ['$rootScope', '$location', '$anchorScroll', '$timeout', 'Client', 'RecentClients', 'Offline', 'Auth',\
         ($rootScope, $location, $anchorScroll, $timeout, Client, RecentClients, Offline, Auth) ->

  # NOTE: This is for presentation purposes only. The flag indicating whether or not the user
  # is functionally logged in or not is in the Auth service.
  $rootScope.isLoggedIn = true
  $rootScope.logout = -> Auth.logout()
  Auth.watch (isLoggedIn) ->
    $rootScope.isLoggedIn = isLoggedIn
    $location.url(if isLoggedIn then '/' else '/auth/login')

  $rootScope.online_status = true
  $rootScope.last_sync_success = true

  offlineClasses = [Client, RecentClients]
  $rootScope.checkOnline = ->
    online = Offline.online()
    if online != $rootScope.online_status
      if $rootScope.online_status = online
        # User just came online, so we should sync everything now.
        Offline.sync(offlineClasses,
          (-> $rootScope.last_sync_success = true),
          (-> $rootScope.last_sync_success = false)
        )
    else if !$rootScope.last_sync_success
      Offline.sync(offlineClasses,
        (-> $rootScope.last_sync_success = true),
        (-> $rootScope.last_sync_success = false)
      )
    $timeout($rootScope.checkOnline, 2000)
    # $timeout returns a promise to the return value, creating a circular reference if it's returned here.
    # This causes a ridiculously massive memory leak
    return null

  # Also sync every time we navigate to a different page.
  $rootScope.$on('$routeChangeSuccess', -> $timeout (-> Offline.sync(offlineClasses)), 2000)
  $rootScope.$on('$routeChangeStart', -> $rootScope.loading = true)
  $rootScope.$on('$viewContentLoaded', -> $rootScope.loading = false)

  $rootScope.scrollTo = (id) ->
    old = $location.hash()
    $location.hash(id)
    $anchorScroll()
    $location.hash(old)

  $rootScope.menuItems = [
    name: 'Home',
    link: '/index'
  ,
    name: 'Clients'
    link: '/clients/index',
  ,
    name: 'Brokerage'
    link: '/brokerage/index'
  ]

  $rootScope._curMenuItem = null
  $rootScope._curSubMenuItem = null
  $rootScope._showMenu = false
  $rootScope._showSubMenu = false

  $rootScope.menuItemIsCaretExpanded = (path) ->
    return $rootScope._curMenuItem == path and $rootScope._showSubMenu

  $rootScope.menuShouldShow = ->
    return $rootScope._showMenu

  $rootScope.menuItemSelect = (path, subMenu) ->
    if $rootScope._curMenuItem == path and $rootScope._showSubMenu
      $rootScope._curMenuItem = null
    else
      $rootScope._curMenuItem = path
    if (not $rootScope._showSubMenu = subMenu?) && path?
      $rootScope._showMenu = false
      $location.url(path)

  $rootScope.menuItemIsSelected = (path) ->
    regex = /(\/)index+$/
    location = $location.path().replace regex, ''
    if path == $rootScope.menuItems[0].link or path == '/'
      return location == $rootScope.menuItems[0].link or location == ''
    else
      path = path.replace regex, ''
      return location.substr(0, path.length) == path

  $rootScope.subMenuItemSelect = (path) ->
    $rootScope._showSubMenu = false
    $rootScope._showMenu = false
    if $rootScope._curSubMenuItem == path
      $rootScope._curSubMenuItem = null
    else
      $rootScope._curSubMenuItem = path

  $rootScope.subMenuShouldShow = (path) ->
    return $rootScope._curMenuItem == path and $rootScope._showSubMenu

  $rootScope.subMenuItemIsSelected = (path) ->
    return $location.path().substr(0, path.length) == path

  $rootScope.mainMenuLinkClick = ->
    $rootScope._showMenu = !$rootScope._showMenu
]
