App.directive 'coverageScheduleForm', ['$parse', 'Modal', ($parse, Modal) ->
  ($scope, elem, attrs) ->
    $scope.coverage = {}
    $scope.coverageCategories =
      <%= Client::FIELDS.find { |f| f[:id] == 'locations' }[:type].find { |f| f[:id] == 'coverage_schedules' }[:coverages].to_json %>
    coverageSubfields = ['coinsurance', 'deductible', 'limit']

    coverageLookup = {}
    for category in $scope.coverageCategories
      coverageLookup[category.name] = {}
      for type in category.type
        coverageLookup[category.name][type.name] = type

    form = attrs.coverageScheduleForm
    model = attrs.coverageScheduleModel
    obj = $parse(form)
    store = $parse(model)

    # Convert human readable text into underscored id
    # e.g. Leasehold Interest (Rents) -> leasehold_interest_rents
    createId = (str) ->
      str.replace(///\s///g, '_').replace(///[^a-zA-Z\._]///g, '').toLowerCase()

    root = $scope.rootController()
    root.saveCoverageSchedules = ->
      coverageSchedules = obj($scope) || {}

      existing = {}
      for cov in (store($scope) || [])
        (existing[cov.category.value] ||= {})[cov.type.value] = cov

      collection = []
      index = 0
      $scope.updateOEDs()
      for cat, data of coverageSchedules
        for type, coverage of data
          if !angular.equals(coverage, {})
            exist = existing[cat]?[type]
            coverage.id = exist?.id || createId(type + '.' + cat)
            coverage.category = exist?.category || {value: cat}
            coverage.type = exist?.type || {value: type}
            collection.push(angular.copy(coverage))

      # IDs are chosen such that this is equivalent to an alphabetical sort
      collection.sort (a, b) ->
        a.id.localeCompare(b.id)

      store.assign($scope, collection)
      $scope.clientForm.$setDirty()
      Modal.toggleModal(form)
      $scope.saveForm(false)

    root.editCoverageSchedule = (index) ->
      collection = store($scope) || {}

      $scope.changedCoverages = {}
      coverageSchedules = {}
      for coverage, i in collection
        if !coverageLookup[coverage.category.value]?[coverage.type.value]?
          $scope.addType(coverage.category.value, coverage.type.value)

        cov = ((coverageSchedules[coverage.category.value] ||= {})[coverage.type.value] ||= {})
        for field in coverageSubfields
          cov[field] = angular.copy(coverage[field])

        if $scope.changedFields?[form]?[i]?.change
          ($scope.changedCoverages[coverage.category.value] ||= {})[coverage.type.value] =
            $scope.changedFields[form][i].change

        if i == index
          $scope.coverage =
            category: coverage.category.value,
            type: coverage.type.value

      obj.assign($scope, coverageSchedules)
      $scope.showPrompt = $scope.emptyCoverage() && form != 'blanket_coverages'
      $scope.switchCoverage()
      Modal.toggleModal(form)

    root.addCoverageType = ->
      if curCategory = $scope.coverage?.category
        console.log curCategory
        name = prompt('Enter the name of the new coverage type.')
        if name?
          if coverageLookup[curCategory][name]?
            alert('That coverage type already exists.')
          else
            $scope.addType(curCategory, name)

    $scope.addType = (cat, name) ->
      newType = {name: name}
      (coverageLookup[cat] ||= {})[name] = newType
      for category in $scope.coverageCategories
        if category.name == cat
          category.type.push(newType)

    $scope.emptyCoverage = (category, type) ->
      coverageSchedules = obj($scope) || {}
      return $.isEmptyObject(coverageSchedules) if !category?
      return $.isEmptyObject(coverageSchedules[category]) if !type?
      return $.isEmptyObject(coverageSchedules[category]?[type])

    $scope.sumBuildings = ->
      ret = 0
      root = $parse($scope.root)($scope)
      buildings = $parse('buildings.value')(root) || []
      for building in buildings
        if type = building.coverage_type?.value
          value = building[type]?.value
        else
          value = building.replacement_cost?.value || building.actual_cash_value?.value
        ret += parseInt(value) || 0
      ret

    $scope.sumEquipment = ->
      ret = 0
      root = $parse($scope.root)($scope)
      equips = $parse('equipment_schedules.value')(root) || []
      for equip in equips
        ret += parseInt(equip.limit?.value) || 0
      ret

    $scope.sumCOED = ->
      coverageSchedules = obj($scope) || {}
      $scope.sumEquipment() + (parseInt(coverageSchedules['Property']?['Stock']?.limit?.value) || 0)

    $scope.sumPOED = ->
      $scope.sumCOED() + $scope.sumBuildings()

    coedType = 'Contents of Every Description (COED)'
    poedType = 'Property of Every Description (POED)'
    $scope.updateOEDs = ->
      coverageSchedules = obj($scope) || {}
      if $scope.sumBuildings()
        if poed = coverageSchedules['Property']?[poedType]
          poed.limit = {value: $scope.sumPOED()}
      else
        if coed = coverageSchedules['Property']?[coedType]
          coed.limit = {value: $scope.sumPOED()}
      obj.assign($scope, coverageSchedules)

    prevCov = null
    $scope.switchCoverage = ->
      coverageSchedules = obj($scope) || {}

      $scope.updateOEDs()
      if prevCov? && $.isEmptyObject(coverageSchedules[prevCov.category]?[prevCov.type])
        delete coverageSchedules[prevCov.category]?[prevCov.type]

      if cat = coverageLookup[$scope.coverage?.category]?[$scope.coverage?.type]
        # Update building, equipment limits
        if $scope.coverage.category == 'Property'
          if $scope.coverage.type == 'Building'
            cat.limit = $scope.sumBuildings()
          else if $scope.coverage.type == 'Equipment'
            cat.limit = $scope.sumEquipment()
          else if $scope.coverage.type == poedType
            cat.limit = $scope.sumPOED()
          else if $scope.coverage.type == coedType
            cat.limit = $scope.sumCOED()

        elem.find('input.ng-invalid').each -> $(@).val('')
        elem.find('.error-tooltip').each -> $(@).html('')
        ($scope.writeNode ||= {}).curCoverage = ((coverageSchedules[$scope.coverage.category] ||= {})[$scope.coverage.type] ||= {})
        $scope.curCoverageType = cat
        prevCov = angular.copy($scope.coverage)

      obj.assign($scope, coverageSchedules)

    $scope.clearCoverage = ->
      coverageSchedules = obj($scope) || {}
      delete coverageSchedules[$scope.coverage.category]?[$scope.coverage.type]
      obj.assign($scope, coverageSchedules)
      $scope.switchCoverage()

    $scope.addDefaultCoverages = (policyType) ->
      coverageSchedules = obj($scope) || {}

      # Precalculate building, equipment limits
      building = coverageLookup['Property']['Building']
      building.limit = $scope.sumBuildings()
      building.default = if building.limit then 'all' else null

      coverageSchedules['Property'] ||= {}
      if building.limit
        coverageSchedules['Property'][poedType] = {}
        coverageLookup['Property'][poedType].default = 'all'
        coverageLookup['Property'][coedType].default = null
      else
        coverageSchedules['Property'][coedType] = {}
        coverageLookup['Property'][poedType].default = null
        coverageLookup['Property'][coedType].default = 'all'

      equipment = coverageLookup['Property']['Equipment']
      equipment.limit = $scope.sumEquipment()
      equipment.default = if equipment.limit then 'all' else null

      $scope.updateOEDs()

      for cat, types of coverageLookup
        for type, data of types
          if data.default == 'all' || policyType == data.default
            cov = ((coverageSchedules[cat] ||= {})[type] ||= {})
            for key in coverageSubfields
              cov[key] ||= {value: data[key] || ''}

      obj.assign($scope, coverageSchedules)
      $scope.showPrompt = false
]
