App.directive 'coverageScheduleForm', ['$parse', 'Modal', ($parse, Modal) ->
  ($scope, elem, attrs) ->
    $scope.coverage = {}
    $scope.coverageCategories =
      <%= Client::FIELDS.find { |f| f[:id] == 'locations' }[:type].find { |f| f[:id] == 'coverage_schedules' }[:coverages].to_json %>

    coverageLookup = {}
    for category in $scope.coverageCategories
      coverageLookup[category.name] = {}
      for type in category.type
        coverageLookup[category.name][type.name] = type

    form = attrs.coverageScheduleForm
    model = attrs.coverageScheduleModel
    obj = $parse(form)
    store = $parse(model)

    root = $scope.rootController()
    root.saveCoverageSchedules = ->
      coverageSchedules = obj($scope) || {}

      existing = {}
      for cov in (store($scope) || [])
        (existing[cov.category.value] ||= {})[cov.type.value] = cov

      collection = []
      for cat, data of coverageSchedules
        for type, coverage of data
          if !angular.equals(coverage, {})
            exist = existing[cat]?[type]
            coverage.id = exist?.id || Util.generateGUID()
            coverage.category = exist?.category || {value: cat}
            coverage.type = exist?.type || {value: type}
            collection.push(coverage)

      store.assign($scope, collection)
      $scope.clientForm.$setDirty()
      Modal.toggleModal(form)
      $scope.saveForm(false)

    root.editCoverageSchedule = (index) ->
      collection = store($scope) || {}

      $scope.changedCoverages = {}
      coverageSchedules = {}
      for coverage, i in collection
        if !coverageLookup[coverage.category.value]?[coverage.type.value]?
          $scope.addType(coverage.category.value, coverage.type.value)

        (coverageSchedules[coverage.category.value] ||= {})[coverage.type.value] =
          subtype: coverage.subtype,
          replacement_cost: coverage.replacement_cost,
          coinsurance: coverage.coinsurance,
          deductible: coverage.deductible,
          limit: coverage.limit

        if $scope.changedFields?[form]?[i]
          ($scope.changedCoverages[coverage.category.value] ||= {})[coverage.type.value] =
            $scope.changedFields[form][i]

        if i == index
          $scope.coverage =
            category: coverage.category.value,
            type: coverage.type.value

      obj.assign($scope, coverageSchedules)
      $scope.switchCoverage()
      Modal.toggleModal(form)

    root.addCoverageType = ->
      if curCategory = $scope.coverage?.category
        console.log curCategory
        name = prompt('Enter the name of the new coverage type.')
        if name?
          if coverageLookup[curCategory][name]?
            alert('That coverage type already exists.')
          else
            $scope.addType(curCategory, name)

    $scope.addType = (cat, name) ->
      newType = {name: name}
      (coverageLookup[cat] ||= {})[name] = newType
      for category in $scope.coverageCategories
        if category.name == cat
          category.type.push(newType)

    $scope.emptyCoverage = (category, type) ->
      coverageSchedules = obj($scope) || {}
      if !type?
        return $.isEmptyObject(coverageSchedules[category])
      return $.isEmptyObject(coverageSchedules[category]?[type])

    prevCov = null
    $scope.switchCoverage = ->
      coverageSchedules = obj($scope) || {}

      if prevCov? && $.isEmptyObject(coverageSchedules[prevCov.category]?[prevCov.type])
        delete coverageSchedules[prevCov.category]?[prevCov.type]

      if cat = coverageLookup[$scope.coverage?.category]?[$scope.coverage?.type]
        ($scope.writeNode ||= {}).curCoverage = ((coverageSchedules[$scope.coverage.category] ||= {})[$scope.coverage.type] ||= {})
        $scope.curCoverageType = cat
        prevCov = angular.copy($scope.coverage)

      obj.assign($scope, coverageSchedules)

    $scope.clearCoverage = ->
      coverageSchedules = obj($scope) || {}
      delete coverageSchedules[$scope.coverage.category]?[$scope.coverage.type]
      obj.assign($scope, coverageSchedules)
      $scope.switchCoverage()
]
