<% environment.context_class.instance_eval { include ActionView::Helpers } %>
<% environment.context_class.instance_eval { include HostHelper } %>

App.directive 'fileUploader', ['$http', '$parse', ($http, $parse) ->
  ($scope, elem, attrs) ->
    form = elem.parents('form')
    # HACK: angular doesn't recognize input type=file.
    # Create a fake control for the purposes of form error checking.
    ctrl = {$name: elem.attr('name')}
    model = attrs.model
    limit = parseInt(attrs.fileUploaderLimit)
    ngForm = null # must be set after form loads

    resetFileInput = ->
      elem.val('') # reset uploader, so re-uploading the same file registers as a change
      ngForm.$setValidity('required', false, ctrl)

    elem.on('change', (evt) ->
      ngForm = $scope[$scope.node + 'Form']
      if attrs.required
        ngForm.$setValidity('required', evt.target.files.length == 1, ctrl)

      if evt.target.files.length == 1
        if FileReader?
          file = evt.target.files[0]
          if limit && file.size > limit
            limitStr = limit / 1024 / 1024
            limitStr = Math.round(limitStr * 10) / 10
            alert("File exceeds the size limit (#{limitStr} MB). Please try resizing or compressing the file.")
            resetFileInput()
            return

          reader = new FileReader()
          reader.onloadend = ->
            $parse(model).assign($scope, {
              name: file.name,
              raw_data: reader.result,
            })
          reader.readAsDataURL(file)
        else
          alert('File uploads are not supported on your browser.')
      else
        $parse(model).assign($scope, '')
    )

    elem.parents('.modal').on 'modal-toggle', ->
      ngForm = $scope[$scope.node + 'Form']
      resetFileInput()
]
