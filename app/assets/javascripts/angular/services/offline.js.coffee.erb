getData = (resource) ->
  data = {}
  for own key, val of resource
    if key[0] != '$' && # angular variable
       key[0] != '_'    # our own internal variable
      if typeof(val) == 'object'
        data[key] = angular.copy(val)
      else
        data[key] = val
  return data

# Checks if a mobile device has a connection (always true on desktop)
online = ->
  if window.DEBUG_ONLINE?
    return window.DEBUG_ONLINE

  connection_type = navigator.network?.connection?.type
  if connection_type?
    return connection_type != Connection?.NONE
  return navigator.onLine

# By default, just try to match all given keys exactly.
defaultMatch = (params, data) ->
  for key, val of params
    if val instanceof RegExp
      if !data[key]?.match?(val)?
        return false
    else if !angular.equals(data[key], val)
      return false
  return true

syncCollection = (dest, newData, last_synced) ->
  return if !(newData instanceof Array)

  destMap = {}
  destMap[val.id] = val for val in dest
  existingMap = {}
  existingMap[val.id] = val for val in newData

  updated = false
  result = []
  for val in dest
    if !existingMap[val.id] && val.created_at < last_synced
      # must have been deleted locally.
      updated = true
    else if existingMap[val.id]
      updated |= syncFields(val, existingMap[val.id], last_synced)
      result.push(val)
    else
      result.push(val)

  for val in newData
    if !destMap[val.id] && val.created_at > last_synced
      updated = true
      result.push(val)

  result.sort((a, b) -> (a.id || '').localeCompare(b.id || ''))
  angular.copy(result, dest)
  return updated

# By default, assume every field has a 'value' and 'updated_at'. Sync based on the latest
syncFields = (dest, newData, last_synced, overwrite) ->
  updated = false
  # Check each field individually, and update
  for key, val of newData
    if val?.updated_at?
      if (dest[key]?.value instanceof Array) && (val.value instanceof Array) &&
         (dest[key].value[0]?.id? || dest[key].value.length == 0) &&
         (val.value[0]?.id? || val.value.length == 0) # supports deep merging?
        if !dest[key].updated_at? || val.updated_at > dest[key].updated_at
          dest[key].updated_at = val.updated_at
        updated |= syncCollection(dest[key].value, val.value, last_synced)
      else if !dest[key]?.updated_at? || dest[key].updated_at < val.updated_at
        dest[key] = val
        updated = true

  if newData.updated_at > dest.updated_at
    dest.updated_at = newData.updated_at

  return updated

markCollectionChanges = (newData, oldData) ->
  # null oldData can be provided.
  updated = (newData.length != oldData?.length)
  oldIDs = {}
  if oldData?
    oldIDs[val.id] = val for val in oldData
  for val in newData
    if old = oldIDs[val.id]
      updated |= markChanges(val, old)
    else
      val.created_at = val.updated_at = Util.unixTimestamp()
      markChanges(val)
      updated = true
  return updated

markChanges = (newData, oldData) ->
  updated = false

  for key, val of newData
    valUpdated = false
    newVal = val?.value
    oldVal = oldData?[key]?.value
    if (newVal instanceof Array)
      valUpdated = markCollectionChanges(newVal, oldVal)
    else
      valUpdated = !angular.equals(newVal, oldVal)
    if valUpdated
      val.updated_at = Util.unixTimestamp()
      val.created_at ||= val.updated_at
    updated ||= valUpdated

  for key, val of oldData
    if val? && !newData[key]?
      updated = true

  if updated
    newData.updated_at = Util.unixTimestamp()
    newData.created_at ||= newData.updated_at

  return updated

# Wraps the low-level sqlite database.
class Database
  constructor: (@key, @AuthToken) ->
    @db = (window.sqlitePlugin || window).openDatabase('Consilium', '1.0', 'Consilium offline storage database.', 5*1024*1024)
    @db.transaction ((tx) =>
      tx.executeSql "CREATE TABLE IF NOT EXISTS #{@key} (id, user, data)"
    ), ((err) -> console.log err.message)

  get: (id, fn = angular.noop) ->
    @db.transaction ((tx) =>
      tx.executeSql "SELECT * FROM #{@key} WHERE id = ? AND user = ?", [id, @AuthToken.get().email], (tx, res) ->
        if res.rows.length
          fn(angular.fromJson(res.rows.item(0).data))
        else
          fn(null)
    ), ((err) -> console.log err.message)

  all: (fn = angular.noop) ->
    @db.transaction ((tx) =>
      tx.executeSql "SELECT * FROM #{@key} WHERE user = ?", [@AuthToken.get().email], (tx, res) ->
        ret = {}
        if res.rows.length
          for i in [0..res.rows.length-1]
            row = res.rows.item(i)
            ret[row.id] = angular.fromJson(row.data)
        fn(ret)
    ), ((err) -> console.log err.message)

  delete: (id, fn = angular.noop) ->
    @db.transaction ((tx) =>
      tx.executeSql "DELETE FROM #{@key} WHERE id = ? AND user = ?", [id, @AuthToken.get().email], (tx, res) ->
        fn()
    ), ((err) -> console.log err.message)

  insert: (id, data, fn = angular.noop) ->
    @db.transaction ((tx) =>
      tx.executeSql "INSERT INTO #{@key} VALUES (?, ?, ?)",
                    [id, @AuthToken.get().email, angular.toJson(data)], (tx, res) -> fn()
    ), ((err) -> console.log err.message)

  update: (id, data, fn = angular.noop) ->
    @db.transaction ((tx) =>
      tx.executeSql "UPDATE #{@key} SET data = ? WHERE id = ? AND user = ?",
                    [angular.toJson(data), id, @AuthToken.get().email], (tx, res) -> fn()
    ), ((err) -> console.log err.message)

# Higher level key -> value storage.
class Storage
  constructor: (@AuthToken, @key, @sync_fn) ->
    @obj_last_synced = {}
    @db = new Database(@key, @AuthToken)

  storageKey: ->
    @AuthToken.get().email + ':' + @key

  getLastSynced: (obj) ->
    return (obj? && @obj_last_synced[obj]) ||
      +window.localStorage.getItem(@storageKey() + '.lastSynced') || 0

  setLastSynced: (time, obj) ->
    if obj?
      @obj_last_synced[obj] = time
    else
      window.localStorage.setItem(@storageKey() + '.lastSynced', time)

  update: (resource, overwrite, fn = angular.noop) ->
    data = getData(resource)

    need_update = false
    @db.get data.id, (existing) =>
      ret_fn = -> fn(if need_update then data else null)
      if existing
        if !overwrite
          if !existing.id? # deleted
            return fn(existing)
          need_update = @sync_fn(data, existing, @getLastSynced(data.id))
        else
          markChanges(data, existing)
          angular.extend(resource, data)
        @db.update(data.id, data, ret_fn)
      else
        @db.insert(data.id, data, ret_fn)

  delete: (id, permanent, fn = angular.noop) ->
    if permanent
      @db.delete(id, fn)
    else
      # Mark for deletion. Can't actually delete, or we won't be able to sync it
      @db.get id, (data) =>
        data.id = null
        data.updated_at = Util.unixTimestamp()
        @db.update(id, data, fn)

  get: (id, fn = angular.noop) ->
    @db.get(id, fn)

  getAll: (fn = angular.noop) ->
    @db.all(fn)

# Fake storage for desktops, where we don't actually need to persistently store anything.
class TempStorage
  constructor: (@AuthToken, @key, @sync_fn) ->
    @db = {}
    @obj_last_synced = {}
    @last_synced = 0

  getLastSynced: (obj) ->
    return (obj? && @obj_last_synced[obj]) || @last_synced

  setLastSynced: (time, obj) ->
    if obj?
      @obj_last_synced[obj] = time
    else
      @last_synced = time

  update: (resource, overwrite, fn = angular.noop) ->
    data = getData(resource)

    need_update = false
    existing = angular.copy(@db[data.id])
    if existing
      if !overwrite
        if !existing.id? # deleted
          return fn(existing)
        need_update = @sync_fn(data, existing, @getLastSynced(data.id))
      else
        markChanges(data, existing)
        angular.extend(resource, data)

    @db[data.id] = data
    fn(if need_update then data else null)

  delete: (id, permanent, fn = angular.noop) ->
    if permanent
      delete @db[id]
    else
      # Mark for deletion. Can't actually delete, or we won't be able to sync it
      data = @db[id]
      data.id = null
      data.updated_at = Util.unixTimestamp()

  get: (id, fn = angular.noop) ->
    fn(angular.copy(@db[id]))

  getAll: (fn = angular.noop) ->
    fn(angular.copy(@db))

# Wraps an angular HTTP resource with offline functionality.
App.factory 'Offline', ['$resource', '$timeout', 'AuthToken', ($resource, $timeout, AuthToken) -> {
  online: online,

  sync: (offlineClasses, success, error) ->
    remaining = offlineClasses.length
    successful = true
    finalize = ->
      if successful
        success() if success
      else
        error() if error

    for cls in offlineClasses
      cls.sync(
        (->
          remaining -= 1
          if remaining == 0
            finalize()),
        (->
          remaining -= 1
          successful = false
          if remaining == 0
            finalize()))

  # key - index to use for local storage DB
  # resource_url - HTTP resource URL
  # match_fn - select function (for query/get)
  wrap: (key, resource_url, match_fn = defaultMatch, sync_fn = syncFields) ->
    resource = $resource(resource_url, {format: 'json', id: '@id'}, {
      'save': {method: 'PUT'},
      'create': {method: 'POST'}
    })

    if useOfflineStorage = (window.sqlitePlugin? || window.openDatabase?)
      storage = new Storage(AuthToken, key, sync_fn)
    else
      storage = new TempStorage(AuthToken, key, sync_fn)

    class OfflineResource
      constructor: (data = {}) ->
        rsrc = new resource(data)
        angular.extend(this, rsrc)

        timestamp = Util.unixTimestamp()
        @created_at ||= timestamp
        @updated_at ||= timestamp

        # Generate a nearly guaranteed unique id.
        @generateId() if !@id
        @_save = rsrc.$save.bind(this)
        @_create = rsrc.$create.bind(this)
        @_delete = rsrc.$delete.bind(this)

      generateId: ->
        @id = Util.generateGUID()
        @_isNew = true

      getData: ->
        getData(this)

      isNew: ->
        @_isNew || useOfflineStorage && @created_at > storage.getLastSynced(@id)

      $save: (success, error) ->
        storage.get @id, (existing) =>
          data = getData(this)
          markChanges(data, existing)
          angular.extend(this, data)

          if online()
            save_fn = if @isNew() then @_create else @_save
            save_fn(AuthToken.addAuthTokenToJSONRequest({last_synced: storage.getLastSynced(@id)}), (data) =>
              storage.update data, false, (res) =>
                angular.extend(this, res || getData(data))
                storage.setLastSynced(Util.unixTimestamp(), @id)
                @_isNew = false
                success(this) if success
            , (data) =>
                if data.status == 410 # GONE; deleted from the server
                  storage.delete(@id, true)
                else if data.status == 422 # Validation failed for some reason. Don't save
                else # can't reach the server, we'll just leave it as is
                  storage.update this, false, =>
                    OfflineResource.defer(=> success(this)) if success
                  return
                OfflineResource.defer(=> error(data)) if error
            )
          else
            storage.update this, false, => success(this) if success

      $delete: ->
        storage.delete(@id, false)
        @_delete(AuthToken.addAuthTokenToJSONRequest({}), (data) =>
          storage.delete(@id, true)) if online()

      # Ensures a function is called after the current method returns.
      @defer: (fn) ->
        $timeout(fn, 0)

      @synced_recently: ->
        # Synced in the last 10 seconds
        Util.unixTimestamp() - storage.getLastSynced() < 10

      @syncObject: (data, fn = angular.noop) ->
        storage.update data, false, (updated) =>
          if updated?
            if updated.id != null
              angular.extend(data, updated)
              # Let the server possibly merge again.
              # (e.g. to update the timestamps properly)
              data.$save((data2) ->
                storage.update data2, true, =>
                  storage.setLastSynced(Util.unixTimestamp(), data.id)
                  fn()
              ) if online()
            else
              data.$delete(-> storage.delete(id, true)) if online()
              fn()
          else
            storage.setLastSynced(Util.unixTimestamp(), data.id)
            fn()

      @sync: (success, error) ->
        if online()
          last_sync = storage.getLastSynced()
          if Util.unixTimestamp() - last_sync > 60*60*24
            # More than a day old; do a full sync
            last_sync = 0

          resource.query(AuthToken.addAuthTokenToJSONRequest({last_synced: last_sync}), (data) =>
            ids = {}
            for item in data
              ids[item.id] = true
              if item.deleted_at
                storage.delete(item.id, true)
              else
                @syncObject(item)

            storage.getAll (res) =>
              for id, val of res
                if !val.id?
                  offline = new OfflineResource(val)
                  offline.id = id
                  offline.$delete(-> storage.delete(id, true))
                else if !ids[val.id] && val.updated_at > last_sync
                  offline = new OfflineResource(val)
                  offline.$save()
                else if last_sync == 0 && !ids[val.id]
                  storage.delete(val.id, true)

              storage.setLastSynced(Util.unixTimestamp())
              success(data) if success
          , error || angular.noop)
        else
          @defer(error) if error

      @get: (params, success, error, local = false) ->
        res = new OfflineResource(params)
        res.IS_NEW = false

        queryLocal = (data) =>
          if params.id
            storage.get params.id, (ret) =>
              if ret?.id?
                angular.extend(res, ret)
                @defer(=> success(res)) if success
              else
                @defer(=> error(data)) if error
          else if match_fn
            storage.getAll (all) =>
              for id, val of all
                if val.id? && match_fn(params, val)
                  angular.extend(res, val)
                  @defer(=> success(res)) if success
                  return
              @defer(=> error(data)) if error

        if online() && !@synced_recently() && !local
          resource.get(AuthToken.addAuthTokenToJSONRequest(params),
            (data) =>
              @syncObject data, => queryLocal()
          , (data) =>
              if data.status == 410 # GONE; this means it was deleted
                res.id = null
                storage.delete params.id, true, =>
                  @defer(=> error(data)) if error
              else # the server is unreachable; use the cache
                queryLocal()
          )
        else
          queryLocal()

        return res

      @query: (params, success, error, local = false) ->
        res = []
        queryLocal = (data) =>
          storage.getAll (all) =>
            stored = (val for id, val of all)
            if stored != false
              start = params.start || 0
              limit = params.limit || 1e9
              desc = if params.desc then -1 else 1
              stored.sort (a, b) ->
                if params.order_by
                  get_val = (x) ->
                    val = x[params.order_by]
                    val = val?.value || val || ""
                    val = val.toString().toLowerCase()
                  a_val = get_val(a)
                  b_val = get_val(b)
                  if a_val < b_val
                    return -1 * desc
                  if a_val > b_val
                    return 1 * desc
                return 0

              index = 0
              for val in stored
                if !val.id?
                  continue
                if !match_fn || match_fn(params, val)
                  if index >= start && index < start + limit
                    res.push(new OfflineResource(val))
                  index++
              @defer(=> success(res)) if success
            else
              @defer(=> error(data)) if error

        if online() && !@synced_recently() && !local
          resource.query(AuthToken.addAuthTokenToJSONRequest(params),
            (data) =>
              for result in data
                res.push(new OfflineResource(getData(result)))
              success(res) if success
            , queryLocal)
        else
          queryLocal()

        return res
}]
