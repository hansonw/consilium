<% environment.context_class.instance_eval { include ActionView::Helpers } %>
<% environment.context_class.instance_eval { include HostHelper } %>

App.factory 'RecentClients', ['Offline', (Offline) ->
  class RecentClients
    @limit: 10

    @store: Offline.wrap 'RecentClients', '<%= angularApiPath('/api/recent_clients/:get') %>', (-> true), # only one data set per user anyway
      merge_fn = (dest, newData) =>
        # merge dest.clients and newData.clients, then take the most recent.
        merged = (dest.clients || []).concat(newData.clients || [])
        merged.sort((a, b) -> b.timestamp - a.timestamp)
        unique = []
        inList = {}
        for client in merged
          if !inList[client.id] && unique.length < @limit
            inList[client.id] = true
            unique.push(client)

        updated = !angular.equals(unique, dest.clients)
        dest.clients = unique
        return updated

    @getClients: (success, error) ->
      @store.get({get: 'get'}, success, error)

    @logClientShow: (client) ->
      update = (res) =>
        for val, index in res.clients
          if val.id == client.id
            res.clients.splice(index, 1)
            break
        res.clients.splice(0, 0, {
          id: client.id,
          companyName: client.companyName?.value,
          timestamp: Date.now(),
        })
        res.clients = res.clients.splice(0, @limit)
        res.$save()

      res = @store.get({get: 'get'}, (data) ->
        update(res)
      , (data) =>
        res = new @store({clients: []})
        update(res)
      )

    @removeClient: (clientId) ->
      update = (res) =>
        for val, index in res.clients
          if val.id == clientId
            res.clients.splice(index, 1)
            break
        res.$save()

      res = @store.get({get: 'get'}, (data) ->
        update(res)
      , (data) =>
        res = new @store({clients: []})
        update(res)
      )

    @sync: (success, error) ->
      @store.sync(success, error)
]
