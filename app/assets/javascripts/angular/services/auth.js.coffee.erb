<% environment.context_class.instance_eval { include ActionView::Helpers } %>
<% environment.context_class.instance_eval { include HostHelper } %>

App.factory 'AuthToken', ['$resource', ($resource) ->
  get: ->
    return {id: '', email: '', auth_token: '', permissions: 0} if not @_get()
    $.parseJSON(@_get())
  set: (authToken) ->
    localStorage.setItem('authToken', authToken)
  remove: ->
    localStorage.removeItem('authToken')
  addAuthTokenToJSONRequest: (obj) ->
    return obj if not @_get()
    authToken = @get()
    obj.email = authToken.email
    obj.auth_token = authToken.auth_token
    obj
  _get: ->
    localStorage.getItem('authToken')
]

App.factory 'AuthSessionStatus', [ ->
  _watches: []
  notifySessionExpired: ->
    watch.sessionExpired() for watch in @_watches
  watch: (fn) ->
    @_watches.push fn
]

App.factory 'AuthHttpInterceptor', ['$q', '$window', '$rootScope', 'AuthSessionStatus', ($q, $window, $rootScope, AuthSessionStatus) ->
  (promise) ->
    promise.then((response) ->
      response
    , (response) ->
      AuthSessionStatus.notifySessionExpired() if response.status == 401
      $q.reject(response)
    )
]

App.factory 'AuthResetPassword', ['$resource', ($resource) ->
  $resource('<%= angularApiPath('/api/auth/:id/reset_password') %>', {format: 'json', id: '@id'}, {'update': {method: 'PUT'}})
]

App.factory 'Auth', ['$http', '$location', 'AuthToken', 'AuthSessionStatus', ($http, $location, AuthToken, AuthSessionStatus) ->
  service =
    _unauthorizedPaths: ['/auth/(reset_password|login|sign_up).*']
    _isLoggedIn: AuthToken.get()?.email?.length
    _watches: []
    CLIENT: 1,
    BROKER: 2,
    ADMIN:  3,
    isLoggedIn: -> @_isLoggedIn
    tryAutoLogin: ->
      $http.post(
        '<%= angularApiPath('/api/auth/login') %>'
      ).success((data) =>
        AuthToken.set(JSON.stringify(data))
        @_isLoggedIn = true
        @_notifyWatches()
        $location.url('/')
      )
    login: (credentials) ->
      $http.post(
        '<%= angularApiPath('/api/auth/login') %>',
        credentials
      ).success((data, status, headers, config) =>
        AuthToken.set(JSON.stringify(data))
        @_isLoggedIn = true
        @_notifyWatches()
      ).error((data, status, headers, config) ->
        if status == 403
          alert('Invalid email or password.')
        else
          alert('Could not connect to the Consilium servers. Please try again later.')
      )
    signUp: (data, success, error) ->
      res = $http.post(
         '<%= angularApiPath('/api/auth/sign_up') %>',
         data
      )
      res.success(success) if success
      res.error(error) if error
    hasPermissions: (level) ->
      AuthToken.get()?.permissions >= level
    isBroker: ->
      @hasPermissions(@BROKER)
    isAdmin: ->
      @hasPermissions(@ADMIN)
    checkLogin: () ->
      if !@isLoggedIn() && !@locationAllowedUnauthorized()
        $location.url('/auth/login')
        return false
      return true
    checkPermissions: (level) ->
      if @checkLogin()
        if !@hasPermissions(level)
          $location.url('/auth/forbidden')
          $location.replace()
          return false
      return true
    checkBroker: ->
      @checkPermissions(@BROKER)
    checkAdmin: ->
      @checkPermissions(@ADMIN)
    getEmail: ->
      AuthToken.get().email
    getUserId: ->
      AuthToken.get().id
    logout: ->
      $http.get(
        '<%= angularApiPath('/api/auth/logout') %>',
        AuthToken.addAuthTokenToJSONRequest({}),
      ).success((data, status, headers, config) =>
        AuthToken.remove()

        @_isLoggedIn = false
        @_notifyWatches()
      )
    watch: (fn) ->
      @_watches.push fn
    wrapActions: (resource, actions) ->
      actions = actions || ["query", "get", "update"]

      authTokenWrapper = (resource, action) ->
        authToken = AuthToken.get()

        resource["_" + action] = resource[action]

        resource[action] = (data, success, error) ->
          resource["_" + action] angular.extend({}, data or {},
            email: AuthToken.get().email
            auth_token: AuthToken.get().auth_token
          ), success, error

      wrappedResource = resource
      authTokenWrapper(wrappedResource, action) for action in actions
      wrappedResource
    sessionExpired: ->
      if @_isLoggedIn
        @_isLoggedIn = false
        @_notifyWatches()
    locationAllowedUnauthorized: ->
      for unauthorizedPath in @_unauthorizedPaths
        return true if !!$location.url().match(unauthorizedPath)
      false
    _notifyWatches: ->
      watch(@_isLoggedIn) for watch in @_watches

  AuthSessionStatus.watch(service)

  service
]
